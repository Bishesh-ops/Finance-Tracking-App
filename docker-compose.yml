services:
  # Service for your PostgreSQL database
  db:
    image: postgres:15-alpine # Use a lightweight PostgreSQL image (alpine is smaller)
    container_name: finance_tracker_db # A custom name for the container
    environment:
      POSTGRES_DB: finance_tracker # Matches POSTGRES_DB in .env and DATABASE_URL
      POSTGRES_USER: myuser      # Matches POSTGRES_USER in .env and DATABASE_URL
      POSTGRES_PASSWORD: mypassword # Matches POSTGRES_PASSWORD in .env and DATABASE_URL
    volumes:
      - db_data:/var/lib/postgresql/data # Persist database data to a named volume
    ports:
      - "5432:5432" # Map container port 5432 to host port 5432 (optional, for direct access like DBeaver)
    healthcheck: # Health check to ensure DB is ready before app starts
      test: ["CMD-SHELL", "pg_isready -U myuser -d finance_tracker"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Service for your FastAPI backend application
  app:
    build:
      context: . # Build context is the current directory (FINANCE_APP)
      dockerfile: Dockerfile # Use the Dockerfile created earlier
    container_name: finance_tracker_app # A custom name for the container
    env_file: # Explicitly load environment variables from the .env file in the context directory
      - ./.env
    ports:
      - "8000:8000" # Map container port 8000 to host port 8000
    depends_on: # Ensure the 'db' service is started and healthy before 'app' starts
      db:
        condition: service_healthy # Wait until the DB is healthy
    volumes:
      # Mount the application code for live reloading during development.
      # This allows you to edit code on your host and see changes in the container without rebuilding.
      - .:/app
    command: ["uvicorn", "finance_app_backend.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Define named volumes for data persistence
volumes:
  db_data: # This volume will store your PostgreSQL data